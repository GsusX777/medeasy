# MedEasy Project-Specific Windsurf Rules

Version: 1.1  
Diese Regeln erg√§nzen die globalen Rules und sind spezifisch f√ºr MedEasy

## üö® KRITISCHE SICHERHEITSREGELN - IMMER BEFOLGEN

* **Anonymisierung ist UNVER√ÑNDERLICH (AIU):** Die Anonymisierungsfunktion kann NIEMALS deaktiviert, optional gemacht oder umgangen werden. Jeder Code muss dies respektieren.
* **SQLCipher Pflicht (SP):** Alle Patientendaten werden mit SQLCipher (AES-256) verschl√ºsselt. Keine Ausnahmen.
* **Audit-Trail Vollst√§ndig (ATV):** Jede Datenbankoperation, jeder Zugriff, jede √Ñnderung wird im Audit-Log erfasst.

## üèóÔ∏è ARCHITEKTUR-SPEZIFISCH F√úR MEDEASY

* **Clean Architecture Struktur (CAS):**
  - `MedEasy.Domain` - Keine Dependencies, reine Medizinlogik
  - `MedEasy.Application` - CQRS mit MediatR
  - `MedEasy.Infrastructure` - SQLCipher, gRPC, externe Services  
  - `MedEasy.API` - REST mit JWT Auth
  - `MedEasy.AI` - Python Services via gRPC

* **Multi-Language Bridge (MLB):** 
  - .NET ‚Üî Python: Nur via gRPC
  - Frontend ‚Üî Backend: REST API + JWT

* **Technologie-Stack Fest (TSF):**
  - Backend: .NET 8, kein Framework-Wechsel
  - AI: Python 3.11 + FastAPI + gRPC
  - Frontend: Tauri 1.5 + Svelte 4
  - DB: SQLCipher, keine Alternative

## üìö DOKUMENTATIONS-PFLICHT (SOFORT)

* **Dokumentation = Code (D=C):** Dokumentation wird im GLEICHEN Schritt wie Code ge√§ndert.

* **DOCS-INDEX.md als zentrale Referenz (DIR):**
  ```
  Bei ALLEN √Ñnderungen:
  1. PR√úFE docs/DOCS-INDEX.md f√ºr relevante Dokumentationsdateien
  2. AKTUALISIERE ALLE relevanten Dateien im entsprechenden Abschnitt
  
  Beispiel:
  - Datenbank-√Ñnderung ‚Üí Siehe Abschnitt "## Datenbank" im DOCS-INDEX.md
  - API-√Ñnderung ‚Üí Siehe Abschnitt "## API" im DOCS-INDEX.md
  - Frontend-√Ñnderung ‚Üí Siehe Abschnitt "## Frontend" im DOCS-INDEX.md
  ```

* **VOR Code-√Ñnderungen - Dokumentation LESEN (DL):**
  ```
  BEVOR: Jede √Ñnderung
  PR√úFE: docs/DOCS-INDEX.md f√ºr relevante Dokumentationsdateien
  
  BEVOR: Neue Entity erstellen
  PR√úFE: docs/DOCS-INDEX.md Abschnitt "## Datenbank"
  PR√úFE: docs/database/SCHEMA.md f√ºr existierende Struktur
  PR√úFE: docs/database/RELATIONSHIPS.mermaid f√ºr Entit√§tsbeziehungen
  
  BEVOR: Neuer API Endpoint
  PR√úFE: docs/DOCS-INDEX.md Abschnitt "## API"
  PR√úFE: docs/api/API_REFERENCE.md f√ºr bestehendes Pattern
  PR√úFE: docs/architecture/NAMING_CONVENTIONS.md f√ºr Namenskonventionen
  
  BEVOR: Neue Dependency
  PR√úFE: docs/DOCS-INDEX.md Abschnitt "## Architektur"
  PR√úFE: docs/architecture/NAMING_CONVENTIONS.md f√ºr Namenskonventionen
  PR√úFE: docs/architecture/Dependency_Graph.svg f√ºr Abh√§ngigkeitsstruktur
  
  BEVOR: Security-Feature
  PR√úFE: docs/DOCS-INDEX.md Abschnitt "## Compliance und Sicherheit"
  PR√úFE: docs/compliance/SECURITY.md f√ºr bestehende Sicherheitsma√ünahmen
  PR√úFE: docs/testing/SECURITY_TESTING.md f√ºr Testanforderungen
  ```

* **SOFORT nach Code-√Ñnderungen - Dokumentation UPDATEN (DSU):**
  ```
  Neue Entity ‚Üí Update ALLE Dateien im Abschnitt "## Datenbank" des DOCS-INDEX.md
  Neuer API Endpoint ‚Üí Update ALLE Dateien im Abschnitt "## API" des DOCS-INDEX.md
  Neue Dependency ‚Üí Update ALLE Dateien im Abschnitt "## Architektur" des DOCS-INDEX.md
  Architektur-√Ñnderung ‚Üí Update ALLE Dateien im Abschnitt "## Architektur" des DOCS-INDEX.md
  Feature-√Ñnderung ‚Üí Update docs/FEATURE_STATUS.md und andere relevante Dateien
  Security-Feature ‚Üí Update ALLE Dateien im Abschnitt "## Compliance und Sicherheit" des DOCS-INDEX.md
  ```
* **BEI JEDER NEUEN DATEI IM PROJEKT EIN BIBELVERS ALS KOMMENTAR IN DER ERSTEN ZEILE HINZUF√úGEN (BVB):**
  ```
  ‚ÄûDer Herr, unser Gott, lasse uns freundlich ansehen. Lass unsere Arbeit nicht vergeblich sein ‚Äì ja, lass gelingen, was wir tun!" Psalm 90,17
  ```

* **Windsurf-Verhalten Beispiel:**
  ```
  User: "Erstelle eine Prescription Entity"
  Windsurf:
  1. PR√úFT docs/DOCS-INDEX.md f√ºr relevante Dokumentationsdateien im Abschnitt "## Datenbank"
  2. LIEST docs/database/SCHEMA.md
  3. ERSTELLT Prescription.cs nach Pattern
  4. UPDATED docs/database/SCHEMA.md
  5. UPDATED docs/database/RELATIONSHIPS.mermaid
  6. UPDATED andere relevante Dateien aus dem Datenbank-Abschnitt
  7. ANTWORTET: "Entity erstellt und alle relevanten Dokumente aktualisiert [DIR][DL][DSU]"
  ```

## üá®üá≠ SCHWEIZ-SPEZIFISCHE ANFORDERUNGEN

* **Datenschutz Schweiz (DSC):**
  - nDSG-Konformit√§t erforderlich
  - Verschl√ºsselung aller Patientendaten
  - Explizite Einwilligung f√ºr Cloud-Verarbeitung

* **Schweizer Formate (SF):**
  - Datum: DD.MM.YYYY
  - Versicherungsnummer: XXX.XXXX.XXXX.XX

* **Medizinische Fachbegriffe DE-CH (MFD):**
  - Spital statt Krankenhaus
  - Doktor statt Arzt in Anrede
  - Medikament statt Arzneimittel

## ü§ñ KI-INTEGRATION MEDEASY

* **Provider-Kette (PK):**
  1. OpenAI GPT-4o (prim√§r)
  2. Claude 3.7 (fallback)
  3. Gemini 2.5 (fallback)
  4. Lokales Modell (offline)
  - Bei Fehler: N√§chster Provider automatisch
  - Immer anzeigen welcher Provider verwendet wurde

* **Whisper Multi-Model (WMM):**
  - Automatische Modellwahl basierend auf Hardware
  - Manuelle Auswahl √ºber Einstellungen m√∂glich
  - Tiny/Base: Schnell
  - Small/Medium: Genauer
  - KEIN Parallel-Vergleich

* **Cloud-Transparenz (CT):**
  - Cloud nur mit expliziter Session-Einwilligung
  - Opt-in per Feature, nicht global

## üìä DATENMODELL SPEZIFISCH

* **Entit√§ten Immer Verschl√ºsselt (EIV):**
  ```csharp
  public class Patient {
    public byte[] EncryptedName { get; set; }  // NIE string
    public string InsuranceNumberHash { get; set; }  // NIE Klartext
    public DateOnly DateOfBirth { get; set; }  // OK, f√ºr Altersberechnung
  }
  ```

* **Session-Konzept (SK):**
  - Eine Session = Eine Konsultation
  - Session enth√§lt: Audio, Transkript, Analysen
  - Sessions sind unver√§nderlich nach Abschluss

* **Anonymisierungs-Review-Queue (ARQ):**
  - Unsichere Erkennungen (confidence < 80%)
  - Batch-Review durch Arzt
  - Whitelist f√ºr medizinische Begriffe

## üß™ TEST-ANFORDERUNGEN MEDEASY

* **Kritische Pfade 100% (KP100):**
  - Anonymisierung: 100% Coverage PFLICHT
  - Verschl√ºsselung: 100% Coverage PFLICHT
  - Audit: 100% Coverage PFLICHT
  - Rest: >80% angestrebt

* **Test-Daten (TD):**
  - Nutze IMMER Mock-Daten
  - 10 DE + 5 CH-DE Beispiel-Audios
  - Synthetische Patientennamen
  - Keine echten medizinischen Daten

* **Performance-Baseline (PB):**
  - Transkription: <3 Sek Latenz
  - Anonymisierung: <100ms
  - UI Response: <50ms
  - 30min Session ohne Crash

## üö´ SPEZIFISCHE VERBOTE F√úR MEDEASY

* **NIE Patientendaten Loggen (NPL):** Kein Console.WriteLine mit Patienteninfo
* **NIE Anonymisierung Umgehen (NAU):** Kein Flag, keine Config, kein Debug-Modus
* **NIE Unverschl√ºsselt Speichern (NUS):** Auch nicht "tempor√§r" oder "im Cache"
* **NIE Diagnose ohne Warnung (NDW):** Immer Disclaimer bei KI-Vorschl√§gen
* **NIE Echte API-Keys (NEA):** Nutze .env, Secrets Manager, aber nie im Code

## üí° ENTWICKLUNGS-WORKFLOW

* **Feature-Branch Naming (FBN):**
  - `feature/med-<nummer>-<beschreibung>`
  - `bugfix/med-<nummer>-<beschreibung>`
  - `security/med-<nummer>-<beschreibung>`

* **Commit-Messages (CM):**
  ```
  feat(anonymization): Add Swiss name detection [AR]
  fix(audio): Handle Swiss German dialect warning [SDH]
  security(db): Enforce SQLCipher for all connections [SP]
  ```

* **PR-Checkliste (PRC):**
  - [ ] Sicherheit gepr√ºft
  - [ ] Tests geschrieben
  - [ ] Dokumentation aktualisiert
  - [ ] Windsurf Rules befolgt

## üîÑ WORKFLOWS VS. DIREKTE AKTIONEN

* **Direkt machen (KEIN Workflow):**
  - Entity erstellen + Doku
  - API Endpoint + Doku
  - Bugfix
  - Refactoring
  - Einzelne Tests

* **Workflow nutzen f√ºr komplexe, mehrstufige Aufgaben:**
  Beispiele:
  - `/workflow test-security feature=[FeatureName]`
  - `/workflow prepare-release version=[X.Y.Z]`
  - `/workflow new-feature-complete featureName=[FeatureName]`
  - Weitere Workflows nach Bedarf erstellen

## üîç DOKUMENTATIONS-QUICK-REFERENCE

| Aktion | Erst lesen | Dann updaten |
|--------|------------|--------------|
| Jede √Ñnderung | docs/DOCS-INDEX.md | Alle relevanten Dateien im entsprechenden Abschnitt |
| Neue Entity | docs/database/SCHEMA.md | Alle Dateien im Abschnitt "## Datenbank" |
| Neue API | docs/api/API_REFERENCE.md | Alle Dateien im Abschnitt "## API" |
| Neue Dependency | docs/architecture/NAMING_CONVENTIONS.md | Alle Dateien im Abschnitt "## Architektur" |
| Security Feature | docs/compliance/SECURITY.md | Alle Dateien im Abschnitt "## Compliance und Sicherheit" |
| Architektur | docs/architecture/README.md | Alle Dateien im Abschnitt "## Architektur" |

## üìä FEATURE-DOKUMENTATION

* **Feature-Status automatisch tracken (FST):**
  WENN: Neues Feature implementiert
  DANN: Update docs/FEATURE_STATUS.md
  
  Format:
  | Feature | Status | Komponenten | Tests | Notizen |
  |---------|--------|-------------|-------|---------|
  | Anonymisierung | Implementiert | Backend, AI | 100% | Regex + spaCy |
  | Transkription | In Arbeit | AI, Frontend | 60% | Whisper integration |
  | FHIR Export | Geplant | Backend | 0% | F√ºr Vitabyte |
  
  Statuse:
  Implementiert
  In Arbeit  
  Geplant
  Probleme

* **Automatisch generieren bei Feature-Abschluss:**
  - Komponenten-Liste (welche Module betroffen)
  - Test-Coverage 
  - Abh√§ngigkeiten
  - Bekannte Einschr√§nkungen

## üéØ PRIORISIERUNG

Bei Konflikten gilt diese Reihenfolge:
1. Patientensicherheit [PSF]
2. Datenschutz [PbD]
3. Rechtliche Compliance [RA]
4. Medizinische Korrektheit [MA]
5. Performance [PA]
6. Features

## üìù WINDSURF-INTEGRATION

* Bei jeder Code-Generierung diese Regeln anwenden
* Regel-Tags in Kommentaren: `// [AIU] Anonymisierung unver√§nderlich`
* Bei Unsicherheit: Sicherere Variante w√§hlen
* Explizit auf angewandte Regeln hinweisen

## **Folge der Checkliste in docs/project/phase_1.md**

---
**DIESE REGELN SIND VERBINDLICH F√úR ALLE MEDEASY-ENTWICKLUNGEN**
