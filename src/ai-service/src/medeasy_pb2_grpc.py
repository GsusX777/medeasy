# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import medeasy_pb2 as medeasy__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in medeasy_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MedEasyServiceStub(object):
    """MedEasy AI Service Protocol Buffer Definitions
    [MLB] Multi-Language Bridge between .NET and Python
    [AIU] Anonymization is mandatory and cannot be bypassed
    [DSC] Swiss data protection compliance
    [SP] Security measures for sensitive data
    [SDH] Swiss German dialect handling
    [NDW] Never diagnose without warning
    [ATV] Audit logging for all operations
    [CT] Cloud transparency for processing location

    MedEasy AI Service definition
    [MLB] Multi-Language Bridge between .NET and Python via gRPC
    [CAM] Clean Architecture Mandatory - Domain logic separation
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Transcribe = channel.unary_unary(
                '/medeasy.MedEasyService/Transcribe',
                request_serializer=medeasy__pb2.TranscriptionRequest.SerializeToString,
                response_deserializer=medeasy__pb2.TranscriptionResponse.FromString,
                _registered_method=True)
        self.AnalyzeText = channel.unary_unary(
                '/medeasy.MedEasyService/AnalyzeText',
                request_serializer=medeasy__pb2.AnalysisRequest.SerializeToString,
                response_deserializer=medeasy__pb2.AnalysisResponse.FromString,
                _registered_method=True)
        self.ReviewAnonymization = channel.unary_unary(
                '/medeasy.MedEasyService/ReviewAnonymization',
                request_serializer=medeasy__pb2.ReviewRequest.SerializeToString,
                response_deserializer=medeasy__pb2.ReviewResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/medeasy.MedEasyService/HealthCheck',
                request_serializer=medeasy__pb2.HealthRequest.SerializeToString,
                response_deserializer=medeasy__pb2.HealthResponse.FromString,
                _registered_method=True)
        self.DetectSwissGerman = channel.unary_unary(
                '/medeasy.MedEasyService/DetectSwissGerman',
                request_serializer=medeasy__pb2.SwissGermanRequest.SerializeToString,
                response_deserializer=medeasy__pb2.SwissGermanResponse.FromString,
                _registered_method=True)
        self.GetServiceMetrics = channel.unary_unary(
                '/medeasy.MedEasyService/GetServiceMetrics',
                request_serializer=medeasy__pb2.MetricsRequest.SerializeToString,
                response_deserializer=medeasy__pb2.MetricsResponse.FromString,
                _registered_method=True)
        self.BenchmarkModels = channel.unary_unary(
                '/medeasy.MedEasyService/BenchmarkModels',
                request_serializer=medeasy__pb2.BenchmarkModelsRequest.SerializeToString,
                response_deserializer=medeasy__pb2.BenchmarkModelsResponse.FromString,
                _registered_method=True)
        self.GetAvailableModels = channel.unary_unary(
                '/medeasy.MedEasyService/GetAvailableModels',
                request_serializer=medeasy__pb2.GetAvailableModelsRequest.SerializeToString,
                response_deserializer=medeasy__pb2.GetAvailableModelsResponse.FromString,
                _registered_method=True)
        self.GetHardwareInfo = channel.unary_unary(
                '/medeasy.MedEasyService/GetHardwareInfo',
                request_serializer=medeasy__pb2.GetHardwareInfoRequest.SerializeToString,
                response_deserializer=medeasy__pb2.GetHardwareInfoResponse.FromString,
                _registered_method=True)
        self.DownloadModel = channel.unary_unary(
                '/medeasy.MedEasyService/DownloadModel',
                request_serializer=medeasy__pb2.DownloadModelRequest.SerializeToString,
                response_deserializer=medeasy__pb2.DownloadModelResponse.FromString,
                _registered_method=True)


class MedEasyServiceServicer(object):
    """MedEasy AI Service Protocol Buffer Definitions
    [MLB] Multi-Language Bridge between .NET and Python
    [AIU] Anonymization is mandatory and cannot be bypassed
    [DSC] Swiss data protection compliance
    [SP] Security measures for sensitive data
    [SDH] Swiss German dialect handling
    [NDW] Never diagnose without warning
    [ATV] Audit logging for all operations
    [CT] Cloud transparency for processing location

    MedEasy AI Service definition
    [MLB] Multi-Language Bridge between .NET and Python via gRPC
    [CAM] Clean Architecture Mandatory - Domain logic separation
    """

    def Transcribe(self, request, context):
        """Transcribe audio to text with anonymization
        [AIU] Anonymization is mandatory and cannot be bypassed
        [SDH] Swiss German dialect detection and handling
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnalyzeText(self, request, context):
        """Analyze medical text using AI providers
        [PK] Uses provider chain with fallbacks
        [NDW] Never diagnose without warning
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReviewAnonymization(self, request, context):
        """Review anonymization decisions
        [ARQ] Anonymization Review Queue
        [ATV] All decisions are audited
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Check service health and status
        [ATV] Service monitoring and audit
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectSwissGerman(self, request, context):
        """Get Swiss German dialect confidence
        [SDH] Swiss German dialect handling
        [MFD] Swiss medical terminology
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServiceMetrics(self, request, context):
        """Get service metrics and statistics
        [ATV] Audit trail for monitoring
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BenchmarkModels(self, request, context):
        """NEW: Whisper-specific benchmarking and model management [WMM][PB]

        Benchmark all available Whisper models with test audio
        [WMM] Whisper Multi-Model performance comparison
        [PB] Performance baseline for all models
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableModels(self, request, context):
        """Get all available Whisper models with hardware recommendations
        [WMM] Whisper Multi-Model information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHardwareInfo(self, request, context):
        """Get hardware information for Whisper optimization
        [WMM] Hardware analysis for model selection
        [PSF] Performance and system requirements
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadModel(self, request, context):
        """Download a specific Whisper model if not available
        [WMM] Model management and download
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MedEasyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Transcribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Transcribe,
                    request_deserializer=medeasy__pb2.TranscriptionRequest.FromString,
                    response_serializer=medeasy__pb2.TranscriptionResponse.SerializeToString,
            ),
            'AnalyzeText': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeText,
                    request_deserializer=medeasy__pb2.AnalysisRequest.FromString,
                    response_serializer=medeasy__pb2.AnalysisResponse.SerializeToString,
            ),
            'ReviewAnonymization': grpc.unary_unary_rpc_method_handler(
                    servicer.ReviewAnonymization,
                    request_deserializer=medeasy__pb2.ReviewRequest.FromString,
                    response_serializer=medeasy__pb2.ReviewResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=medeasy__pb2.HealthRequest.FromString,
                    response_serializer=medeasy__pb2.HealthResponse.SerializeToString,
            ),
            'DetectSwissGerman': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectSwissGerman,
                    request_deserializer=medeasy__pb2.SwissGermanRequest.FromString,
                    response_serializer=medeasy__pb2.SwissGermanResponse.SerializeToString,
            ),
            'GetServiceMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServiceMetrics,
                    request_deserializer=medeasy__pb2.MetricsRequest.FromString,
                    response_serializer=medeasy__pb2.MetricsResponse.SerializeToString,
            ),
            'BenchmarkModels': grpc.unary_unary_rpc_method_handler(
                    servicer.BenchmarkModels,
                    request_deserializer=medeasy__pb2.BenchmarkModelsRequest.FromString,
                    response_serializer=medeasy__pb2.BenchmarkModelsResponse.SerializeToString,
            ),
            'GetAvailableModels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableModels,
                    request_deserializer=medeasy__pb2.GetAvailableModelsRequest.FromString,
                    response_serializer=medeasy__pb2.GetAvailableModelsResponse.SerializeToString,
            ),
            'GetHardwareInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHardwareInfo,
                    request_deserializer=medeasy__pb2.GetHardwareInfoRequest.FromString,
                    response_serializer=medeasy__pb2.GetHardwareInfoResponse.SerializeToString,
            ),
            'DownloadModel': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadModel,
                    request_deserializer=medeasy__pb2.DownloadModelRequest.FromString,
                    response_serializer=medeasy__pb2.DownloadModelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'medeasy.MedEasyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('medeasy.MedEasyService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MedEasyService(object):
    """MedEasy AI Service Protocol Buffer Definitions
    [MLB] Multi-Language Bridge between .NET and Python
    [AIU] Anonymization is mandatory and cannot be bypassed
    [DSC] Swiss data protection compliance
    [SP] Security measures for sensitive data
    [SDH] Swiss German dialect handling
    [NDW] Never diagnose without warning
    [ATV] Audit logging for all operations
    [CT] Cloud transparency for processing location

    MedEasy AI Service definition
    [MLB] Multi-Language Bridge between .NET and Python via gRPC
    [CAM] Clean Architecture Mandatory - Domain logic separation
    """

    @staticmethod
    def Transcribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/medeasy.MedEasyService/Transcribe',
            medeasy__pb2.TranscriptionRequest.SerializeToString,
            medeasy__pb2.TranscriptionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AnalyzeText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/medeasy.MedEasyService/AnalyzeText',
            medeasy__pb2.AnalysisRequest.SerializeToString,
            medeasy__pb2.AnalysisResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReviewAnonymization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/medeasy.MedEasyService/ReviewAnonymization',
            medeasy__pb2.ReviewRequest.SerializeToString,
            medeasy__pb2.ReviewResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/medeasy.MedEasyService/HealthCheck',
            medeasy__pb2.HealthRequest.SerializeToString,
            medeasy__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DetectSwissGerman(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/medeasy.MedEasyService/DetectSwissGerman',
            medeasy__pb2.SwissGermanRequest.SerializeToString,
            medeasy__pb2.SwissGermanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetServiceMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/medeasy.MedEasyService/GetServiceMetrics',
            medeasy__pb2.MetricsRequest.SerializeToString,
            medeasy__pb2.MetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BenchmarkModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/medeasy.MedEasyService/BenchmarkModels',
            medeasy__pb2.BenchmarkModelsRequest.SerializeToString,
            medeasy__pb2.BenchmarkModelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAvailableModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/medeasy.MedEasyService/GetAvailableModels',
            medeasy__pb2.GetAvailableModelsRequest.SerializeToString,
            medeasy__pb2.GetAvailableModelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHardwareInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/medeasy.MedEasyService/GetHardwareInfo',
            medeasy__pb2.GetHardwareInfoRequest.SerializeToString,
            medeasy__pb2.GetHardwareInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/medeasy.MedEasyService/DownloadModel',
            medeasy__pb2.DownloadModelRequest.SerializeToString,
            medeasy__pb2.DownloadModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
